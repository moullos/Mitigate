using Mitigate.Utils;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Mitigate.Enumerations
{
    class WindowsExploitGuard : Enumeration
    {
        public override string Name => "Windows Exploit Guard";
        public override string MitigationType => MitigationTypes.ExploitProtection;
        public override string MitigationDescription => "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. Many of these protections depend on the architecture and target application binary for compatibility.";
        public override string EnumerationDescription => "Checks for the status of Exploit Protection, Network Protection and ASR rules";

        public override string[] Techniques => new string[] {
            "T1189",
            "T1203",
            "T1068",
            "T1211",
            "T1212",
            "T1210",
            "T1080",
        };

        public override IEnumerable<EnumerationResults> Enumerate(Context context)
        {
            // Exploit Protection
            var MitigationFlagsRaw = Helper.GetRegValueBytes("HKLM", @"System\CurrentControlSet\Control\Session Manager\kernel", "MitigationOptions");
            if (MitigationFlagsRaw != null)
            {
                BitArray MitigationFlags = new BitArray(MitigationFlagsRaw);
                yield return new BooleanConfig("Data Execution Prevention (DEP)", AreBitsSet(MitigationFlags, 0, true));
                yield return new BooleanConfig("Validate Exception Chains (SEHOP)", AreBitsSet(MitigationFlags, 4, true));
                yield return new BooleanConfig("Force Randomisation (Mandatory ASRL)", AreBitsSet(MitigationFlags, 8, false));
                yield return new BooleanConfig("High-entropy ASRL", AreBitsSet(MitigationFlags, 12, true));
                yield return new BooleanConfig("Bottom-Up ASLR", AreBitsSet(MitigationFlags, 16, true));
                yield return new BooleanConfig("High-entropy ASLR", AreBitsSet(MitigationFlags, 20, true));
                yield return new BooleanConfig("Control Flow Guard", AreBitsSet(MitigationFlags, 40, true));
            }
            else
            {
                yield return new BooleanConfig("Exploit Protection", false);
            }
           
            // Network Protection
            var RegValue = Helper.GetRegValue("HKLM", @"SOFTWARE\Microsoft\Windows Defender\Windows Defender Exploit Guard\Network Protection", "EnableNetworkProtection");
            yield return new BooleanConfig("Network Protection", RegValue == "1");

            // Controlled Folder Access
            RegValue = Helper.GetRegValue("HKLM", @"SOFTWARE\Microsoft\Windows Defender\Windows Defender Exploit Guard\Controlled Folder Access", "EnableControlledFolderAccess");
            yield return new BooleanConfig("Controlled folder access", RegValue == "1");
            
            // ASR
            if (ASRUtils.IsASREnabled())
            {
                if (context.Arguments.Full)
                    foreach(var rule in ASRUtils.GetASRRulesStatus())
                    {
                        yield return new BooleanConfig(rule.Key, rule.Value);
                    }
            }
            else
            {
                yield return new BooleanConfig("ASR", false);
            }
        }

        private bool AreBitsSet(BitArray flags, int enabledBit, bool defaultValue)
        {
            var disabledBit = enabledBit + 1;
            if (flags.Get(enabledBit) && flags.Get(disabledBit))
            {
                throw new Exception("Not possible. Probably a bug. Care to fix it?");
            }

            if (!flags.Get(enabledBit) && !flags.Get(disabledBit))
            {
                // No system-wide settings set -> returning the default
                return defaultValue;
            }

            return flags.Get(enabledBit);
        }
    }
}
